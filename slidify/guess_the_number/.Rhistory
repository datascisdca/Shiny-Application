x<-1:10
if(x>5){}
if(x>5){x<-0}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
g
getwd()
list.files("diet_data")
andy <- read.csv("diet_data/Andy.csv")
head(andy)
length(andy$Day)
dim(andy)
str(andy)
summary(andy)
names(andy)
andy[1, "Weight"]
andy[30, "Weight"]
andy[which(andy$Day == 30), "Weight"]
andy[which(andy[,"Day"] == 30), "Weight"]
subset(andy$Weight, andy$Day==30)
andy_start <- andy[1, "Weight"]
andy_end <- andy[30, "Weight"]
andy_start
andy_end
andy_loss <- andy_start - andy_end
andy_loss
files <- list.files("diet_data")
files
files[1]
files[2]
files[3:5]
head(read.csv(files[3]))
files_full <- list.files("diet_data", full.names=TRUE)
files_full
head(read.csv(files[3]))
head(read.csv(files_full[3]))
andy_david <- rbind(andy, read.csv(files_full[2]))
dim(andy)
dim(andy_david)
head(andy_david)
tail(andy_david)
day_25 <- andy_david[which(andy_david$Day == 25), ]
day_25
for (i in 1:5) {print(i)}
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
str(dat)
names(dat)
summary(dat)
str(dat)
for (i in 1:5) {
dat2 <- data.frame()
dat2 <- rbind(dat2, read.csv(files_full[i]))
}
str(dat2)
head(dat2)
dim(dat2)
median(dat$Weight)
dat
median(dat$Weight, na.rm=TRUE)
dat_30 <- dat[which(dat[, "Day"] == 30),]
dat_30
median(dat_30$Weight)
weightmedian <- function(directory, day)  {
files_list <- list.files(directory, full.names=TRUE)   #creates a list of files
dat <- data.frame()                             #creates an empty data frame
for (i in 1:5) {
#loops through the files, rbinding them together
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "Day"] == day),]  #subsets the rows that match the 'day' argument
median(dat_subset[, "Weight"], na.rm=TRUE)      #identifies the median weight
#while stripping out the NAs
}
weightmedian(directory = "diet_data", day = 20)
weightmedian("diet_data", 4)
weightmedian("diet_data", 17)
dat
dat_subset
dat
unzip("rprog-data-specdata.zip", exdir = "rprog-data-specdata")
list.files("rprog-data-specdata\specdata")
list.files("rprog-data-specdata/specdata")
test <- read.csv("rprog-data-specdata/specdata/001.csv")
test
head(test)
length(test$nitrate)
tail(test)
test
pollutantmean <- function(directory, pollutant, id = 1:332) {
list.files("spectdata")
list.files("spectdata")
list.files("specdata")
files <- list.files("specdata")
files(1)
files_full <- list.files("specdata", full.names=TRUE)
head(read.csv(files_full[3]))
head(read.csv(files_full[300]))
dat <- data.frame()
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
mean_vector <- c()
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(round(result, 3))
}
pollutantmean("specdata", "sulfate", 1:10) == 4.064
pollutantmean("specdata", "nitrate", 70:72) == 1.706
pollutantmean("specdata", "nitrate", 23) == 1.281
pollutantmean("specdata", "nitrate", 23) == 1.0
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
+
+ if(grep("specdata", directory) == 1) {
+     directory <- ("./specdata/")
+ }
+ mean_vector <- c()
+ all_files <- as.character( list.files(directory) )
+ file_paths <- paste(directory, all_files, sep="")
+ for(i in id) {
+     current_file <- read.csv(file_paths[i], header=T, sep=",")
+     head(current_file)
+     pollutant
+     na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
+     mean_vector <- c(mean_vector, na_removed)
+ }
+ result <- mean(mean_vector)
+ result
+ }
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
+
+ if(grep("specdata", directory) == 1) {
+     directory <- ("./specdata/")
+ }
+ mean_vector <- c()
+ all_files <- as.character( list.files(directory) )
+ file_paths <- paste(directory, all_files, sep="")
+ for(i in id) {
+     current_file <- read.csv(file_paths[i], header=T, sep=",")
+     head(current_file)
+     pollutant
+     na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
+     mean_vector <- c(mean_vector, na_removed)
+ }
+ result <- mean(mean_vector)
+ }
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
+
+ if(grep("specdata", directory) == 1) {
+     directory <- ("./specdata/")
+ }
+ mean_vector <- c()
+ all_files <- as.character( list.files(directory) )
+ file_paths <- paste(directory, all_files, sep="")
+ for(i in id) {
+     current_file <- read.csv(file_paths[i], header=T, sep=",")
+     head(current_file)
+     pollutant
+     na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
+     mean_vector <- c(mean_vector, na_removed)
+ }
+ result <- mean(mean_vector)
+ }
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(result)
}
pollutantmean("specdata", "sulfate", 1:10) == 4.064
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(result)
}
pollutantmean("specdata", "sulfate", 1:10) == 4.064
getwd()
pollutantmean("specdata", "sulfate", 1:10) == 4.064
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
# set working directory
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(round(result, 3))
}
pollutantmean("specdata", "sulfate", 1:10) == 4.064
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
# set working directory
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(result)
}
pollutantmean("specdata", "sulfate", 1:10) == 4.064
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 70:72)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
# set working directory
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
result
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean("specdata", "nitrate", 70)
pollutantmean("specdata", "nitrate", 71)
pollutantmean("specdata", "nitrate", 72)
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in id) {
dat <- rbind(dat, read.csv(files_full[i]))
}
mean(dat[, pollutant], na.rm = TRUE)
}
pollutantmean("specdata", "nitrate", 70:72)
files_full
pollutantmean("specdata", "nitrate", 1)
complete <- function(directory, id = 1:332) {
files_full <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in id) {
moni_i <- read.csv(files_full[i])
nobs <- sum(complete.cases(moni_i))
tmp <- data.frame(i, nobs)
dat <- rbind(dat, tmp)
}
colnames(dat) <- c("id", "nobs")
dat
}
complete("specdata", 3)
complete("specdata", 30:25)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 1)
corr <- function(directory, threshold = 0) {
files_full <- list.files(directory, full.names = TRUE)
dat <- vector(mode = "numeric", length = 0)
for (i in 1:length(files_full)) {
moni_i <- read.csv(files_full[i])
csum <- sum((!is.na(moni_i$sulfate)) & (!is.na(moni_i$nitrate)))
if (csum > threshold) {
tmp <- moni_i[which(!is.na(moni_i$sulfate)), ]
submoni_i <- tmp[which(!is.na(tmp$nitrate)), ]
dat <- c(dat, cor(submoni_i$sulfate, submoni_i$nitrate))
}
}
dat
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source('~/rprog-scripts-submitscript1.R')
submit()
submit()
2
submit()
submit()
submit()
source('~/rprog-scripts-submitscript1.R')
submit()
submit()
submit()
source('~/rprog-scripts-submitscript1.R')
submit()
submist()
submit()
submit()
source("ProgrammingAssignment2/cachematrix.R")
source(cachematrix.R)
source('~/ProgrammingAssignment2-master/cachematrix.R')
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
data <- readcsv("getdata-data-ss06hid.csv")
data <- readcsv2("getdata-data-ss06hid.csv")
data <- read.csv("getdata-data-ss06hid.csv")
head data
head(data)
sum(!is.na(HD[HD$VAL >= 24, 37]))
sum(!is.na(data[data$VAL >= 24, 37]))
req <- GET("https://api.github.com/rate_limit", gtoken)
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "28fee4954d403505f872",
secret = "c5c992e2edabf671e7ce71a764a8a4ff94b1f65f")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
dataFile <- "./data/household_power_consumption.txt"
source('~/plot1.R')
source('~/plot1.R')
source('~/plot2.R')
source('~/plot3.R')
source('~/plot4.R')
source('~/plot1a.R')
source('~/plot2.R')
sessionInfo()
library(swirl)
swirl()
>install.packages("xtable")
install.packages("xtable")
data(mtcars)
summary(mtcars)
source('~/Regression Models Course Project/test.R')
install.packages(caret)
install.packages("caret")
source('~/Regression Models Course Project/test.R')
source('~/Regression Models Course Project/test2.R')
source('~/Regression Models Course Project/test2.R')
source('~/Regression Models Course Project/test2.R')
source('~/Regression Models Course Project/test2.R')
data(mtcars)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
boxplot(mpg ~ am, data = mtcars, xlab = "Transmission (0 = automatic, 1 = manual)")
analysis <- aov(mpg ~ ., data = mtcars)
summary(analysis)
lm <- lm(mpg ~ cyl + disp + wt + drat + am, data = mtcars)
summary(lm)
lm <- lm(mpg ~ cyl + disp + wt + am, data = mtcars)
summary(lm)
lm <- lm(mpg ~ cyl + wt + am, data = mtcars)
summary(lm)
par(mfrow = c(2, 2))
plot(lm)
pairs(mtcars)
install.Rtools()
updateR()
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("rsconnect")
install.packages('rsconnect')
install.packages("rsconnect")
deployApp()
setwd("~/")
deployApp()
library(shiny)
runApp()
library(manipulate)
install.packages(manipulate)
install.packages('manipulate')
library(manipulate)
manipulate(plot(1:x), x=slider(1,100))
install.packages(rCharts)
install.packages('rCharts')
install.packages('GoogleVis')
install.packages('googleVis')
install.packages('rCharts')
require(devtools)
install_github('rCharts', 'ramnathv')
## Example 1 Facetted Scatterplot
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
library(rCharts)
## Example 1 Facetted Scatterplot
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
library("devtools")
install_github("ropensci/plotly")
library(plotly)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
setwd("~/shiny")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(slidify)
setwd("~/Shiny-Application/slidify")
author("guess_the_number")
publish_github(datascisdca, Shiny-Application)
